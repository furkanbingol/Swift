//
//  EmojiTableViewController.swift
//  UITableView
//
//  Created by Furkan Bing√∂l on 18.02.2023.
//

import UIKit

// VC'miz normal bir VC olsaydƒ±, UITableViewDataSource && UITableViewDelegate protokollerini kabul etmeliydi.
// Fakat bizim kullandƒ±ƒüƒ±mƒ±z View Controller zaten TableViewController. Zaten bu protokolleri conform ediyor. O y√ºzden gerek yok.
class EmojiTableViewController: UITableViewController {

    // MARK: - Properties
    var emojis: [Emoji] = [
        Emoji(symbol: "üòÄ", name: "Grinning Face",
              description: "A typical smiley face.", usage: "happiness"),
        Emoji(symbol: "üòï", name: "Confused Face",
              description: "A confused, puzzled face.", usage: "unsure what to think; displeasure"),
        Emoji(symbol: "üòç", name: "Heart Eyes",
              description: "A smiley face with hearts for eyes.",
              usage: "love of something; attractive"),
        Emoji(symbol: "üëÆ", name: "Police Officer",
              description: "A police officer wearing a blue cap with a gold badge.",
              usage: "person of authority"),
        Emoji(symbol: "üê¢", name: "Turtle",
              description: "A cute turtle.",
              usage: "Something slow"),
        Emoji(symbol: "üêò", name: "Elephant",
              description: "A gray elephant.",
              usage: "good memory"),
        Emoji(symbol: "üçù", name: "Spaghetti",
              description: "A plate of spaghetti.",
              usage: "spaghetti"),
        Emoji(symbol: "üé≤", name: "Die",
              description: "A single die.",
              usage: "taking a risk, chance; game"),
        Emoji(symbol: "‚õ∫Ô∏è", name: "Tent",
              description: "A small tent.",
              usage: "camping"),
        Emoji(symbol: "üìö", name: "Stack of Books",
              description: "Three colored books stacked on each other.",
              usage: "homework, studying"),
        Emoji(symbol: "üíî", name: "Broken Heart",
              description: "A red, broken heart.",
              usage: "extreme sadness"),
        Emoji(symbol: "üí§", name: "Snore",
              description: "Three blue \'z\'s.",
              usage: "tired, sleepiness"),
        Emoji(symbol: "üèÅ", name: "Checkered Flag",
              description: "A black-and-white checkered flag.",
              usage: "completion")
    ]
    
    
    override func viewDidLoad() {
        super.viewDidLoad()

        
    }
    
    
    //Diƒüer segue'ye ge√ßmeden √∂nce yapƒ±lacaklar
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "toEditEmoji" {
            let selectedIndexPath = tableView.indexPathForSelectedRow!
            let selectedEmoji = emojis[selectedIndexPath.row]
            
            //segue NavigationController'a baƒülƒ±. Bu y√ºzden destination olarak UINavigationController'e veriyoruz.
            let destVC = segue.destination as! UINavigationController
            
            // NavigationController'ƒ±n topViewController(kendisine baƒülƒ± olan ƒ∞LK SAYFA)'a ula≈üabiliriz.
            let editEmojiVC = destVC.topViewController as! NewEmojiTableViewController
            
            editEmojiVC.newEmoji = selectedEmoji
        }
    }
    
    
    // MARK: - Functions
    @IBAction func editButtonTapped(_ sender: UIBarButtonItem) {
        let editingMode = tableView.isEditing     // 'O an' TableView'ƒ±n edit modda olup olmadƒ±ƒüƒ± bilgisini verir. (true/false)
        
        tableView.setEditing(!editingMode, animated: true)   //TableView'ƒ±n editing moda girmesini ve √ßƒ±kmasƒ±nƒ± saƒülar.
    }
    
    
    // MARK: - Table view data source

    // Section Sayƒ±sƒ± (Row'larƒ± barƒ±ndƒ±ran yapƒ±lara 'Section' denir. Bir tableView'da birden fazla Section olabilir.)
    override func numberOfSections(in tableView: UITableView) -> Int {
        // 1 section varsa bu fonksiyonu yazmak zorunda deƒüiliz.
        // √á√ºnk√º: Varsayƒ±lan section sayƒ±sƒ± zaten 1'dir.
        return 1
    }


    // Satƒ±r Sayƒ±sƒ±
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // Her section i√ßin 1 kez √ßalƒ±≈üƒ±yor. √ñrneƒüin 4 section'a sahip bir tableView varsa, bu fonksiyon her section i√ßin
        // 1 kez olmak √ºzere toplam 4 kez √ßalƒ±≈üacaktƒ±r. 'section' parametresi, o an √ßizilmekte olan section bilgisini verir.
        
        return emojis.count
    }
    
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // Bir cell, ne zamanki ekrana gelecek; 'cellForRowAt' ile √ßizilir.
        // Bu fonksiyonun ka√ß kez √ßalƒ±≈üacaƒüƒ± belli deƒüildir.
        // indexPath --> O an √ßizilmekte olan h√ºcrenin konum bilgisi.
        
        let emoji = emojis[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "EmojiCell", for: indexPath) as! EmojiTableViewCell
        //init gibi fakat init kullanamayƒ±z. √á√ºnk√º her cell i√ßin memory'de yer a√ßmak istemiyoruz. G√∂z√ºkenler i√ßin yer a√ßƒ±yoruz. Bu y√ºzden -> 'dequeueReusableCell' kullanƒ±yoruz.
        
        // H√ºcreyi, data ile doldurmak
        cell.update(with: emoji)
        
        return cell
    }
    
    // Cell'ler arasƒ± mesafeyi ayarlar
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }

    
    // MARK: - Table view delegate (optional)
    
    // Kullanƒ±cƒ±, bir h√ºcreyi 'se√ßtiƒüi zaman' √ßalƒ±≈üan fonksiyon
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        performSegue(withIdentifier: "toEditEmoji", sender: nil)
    }
    
    
    // Kullanƒ±cƒ±, cell'leri kendi aralarƒ±nda yer deƒüi≈ütirebilir. Deƒüi≈ütirdiƒüi sƒ±rada √ßalƒ±≈üan fonksiyon.
    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        
        // sourceIndexPath: Sƒ±rasƒ± deƒüi≈ütirilmek istenen h√ºcrenin indexPath'i
        // destinationIndexPath: Gidilmesi istenilen konum
        
        // √ñNEMLƒ∞: array sƒ±rasƒ±, tableView h√ºcre sƒ±rasƒ± ile her zaman aynƒ± kalmasƒ± gerekir.
        let movedEmoji = emojis.remove(at: sourceIndexPath.row)   //hem siler, hem o elemanƒ± d√∂nd√ºr√ºr.
        emojis.insert(movedEmoji, at: destinationIndexPath.row)
        
        // TableView reload etmemiz gerekli, yeniden √ßizim i√ßin
        tableView.reloadData()
    }
    
    
    // Editlediƒüimizde, sol taraftaki editingStyle'ƒ±nƒ±n ≈üeklini belirler.
    override func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -> UITableViewCell.EditingStyle {
        return .delete
    }

    
    // indexPath: Editing aksiyonunun ger√ßekle≈ütiƒüi h√ºcrenin konumu.
    // editingStyle: Ger√ßekle≈üen aksiyon (.delete / .insert)
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        
        if editingStyle == .delete {
            emojis.remove(at: indexPath.row)                        // array'den indexPath.row'daki objeyi sil
            tableView.deleteRows(at: [indexPath], with: .fade)      // tableView'dan o satƒ±rƒ± sil
        }
    }
    
    
    // Bu fonksiyon, NewEmojiViewController tarafƒ±ndan √ßalƒ±≈ütƒ±rƒ±lacak.
    // Sayfalar arasƒ±, soyut bir i≈ülem diyebiliriz. Ba≈üka bir VC, bu VC'deki bu fonksiyonu tetikliyor. Storyboard'dan segue verirken, Exit'e doƒüru segue veriyoruz ve bu action'u se√ßiyoruz.
    @IBAction func unwindFromNewEmoji(_ segue: UIStoryboardSegue) {
        
        // Yalnƒ±zca 'saveUnwind' ise √ßalƒ±≈ümaya devam etmeli.
        guard segue.identifier == "saveUnwind",
            let sourceViewController = segue.source as? NewEmojiTableViewController,
                let newEmoji = sourceViewController.newEmoji else { return }
        
        
        // Daha √∂nceden bir h√ºcre se√ßilmi≈ü ise (Yani aslƒ±nda var olan veriyi editlemek istiyor)
        if let selectedIndexPath = tableView.indexPathForSelectedRow {
            emojis[selectedIndexPath.row] = newEmoji
            // tableView.reloadData() --> T√ºm TableView'i reload eder. Performans olarak MANTIKSIZ!
            tableView.reloadRows(at: [selectedIndexPath], with: .none)   //Se√ßili olan h√ºcrelerin yeniden √ßizilmesini saƒülar.
            
        } else {
            // Yeni bir emoji eklemek istiyor
            
            // Yeni bir h√ºcre i√ßin indexPath olu≈ütur
            let newIndexPath = IndexPath(row: emojis.count, section: 0)   //son'a ekle(emojis.count)
            
            // newEmoji nesnesini, array'e ekleme
            emojis.append(newEmoji)
            
            // Olu≈üturduƒüumuz bu indexPath ile TableView'a yeni bir h√ºcre eklenir.
            tableView.insertRows(at: [newIndexPath], with: .fade)
        }
        
    }
    
}
